{-# OPTIONS --lossy-unification #-}
module Limits where

open import Cubical.Data.Nat renaming (elim to ℕElim)
open import Cubical.Data.Sigma
open import Cubical.Foundations.Everything
open import Cubical.Foundations.Equiv.HalfAdjoint
open import Cubical.Functions.FunExtEquiv

comm1 : {X Y : Type ℓ-zero} (F : Type ℓ-zero → Type ℓ-zero)
  (f : (X : Type ℓ-zero) → F X → F X)
  (p : (X : Type ℓ-zero) → (f X) ≡ (λ x → x))
  (h : {X Y : Type ℓ-zero} → (f : Y → X) → F X → F Y)
  (g : Y → X) (x : F X)
  → cong (f _) (cong (h g) (λ i → (p _) i x)) ⁻¹
   ∙ (λ i → (p _) i (h g (f _ (x))))
   ∙ cong (h g) (λ i → (p _) i x)
   ≡ (λ i → (p _) i (h g x))
comm1 {X = X} {Y = Y} F f p =
  J (λ f' q
  → (h : {X Y : Type ℓ-zero} → (f : Y → X) → F X → F Y)
     (g : Y → X) (x : F X)
   → cong (f' _) (cong (h g) (λ i → q (~ i) _ x)) ⁻¹
      ∙ (λ i → q (~ i) _ (h g (f' _ x)))
      ∙ cong (h g) (λ i → q (~ i) _ x)
    ≡ (λ i → q (~ i) _ (h g x)))
  (λ h g x → cong (refl ∙_) (lUnit _ ⁻¹)
              ∙ lUnit _ ⁻¹)
  (funExt p ⁻¹)

comm2 : {X Y : Type ℓ-zero} (F : Type ℓ-zero → Type ℓ-zero)
  (f : (X : Type ℓ-zero) → F X → F X)
  (p : (X : Type ℓ-zero) → (f X) ≡ (λ x → x))
  (h : {X Y : Type ℓ-zero} → (f : Y → X) → F X → F Y)
  (g : Y → X) (x : F X)
  → (λ i → p _ i (h g x)) ⁻¹
   ∙ cong (f _) (cong (h g) (λ i → p _ i x)) ⁻¹
   ∙ (λ i → p _ i ((h g) (f _ x)))
   ≡ cong (h g) (λ i → p _ i x) ⁻¹
comm2 {X = X} {Y = Y} F f p =
  J
  (λ f' p'
  → (h : {X Y : Type ℓ-zero} → (f : Y → X) → F X → F Y)
  (g : Y → X) (x : F X)
  → (λ i → p' (~ i) _ (h g x)) ⁻¹
   ∙ cong (f' _) (cong (h g) (λ i → p' (~ i) _ x)) ⁻¹
   ∙ (λ i → p' (~ i) _ ((h g) (f' _ x)))
   ≡ cong (h g) (λ i → p' (~ i) _ x) ⁻¹)
  (λ h g x → lUnit _ ⁻¹ ∙ lUnit _ ⁻¹)
  (funExt p ⁻¹)

transportHomotopyFuncHell : {X : Type ℓ-zero}
  {S : X → X}
  {R : X → X}
  (pR : R ≡ (λ x → x))
  (f : {x : X} → S x ≡ x → S (R x) ≡ (R x))
  {x : X}
  (r : S x ≡ x)
  → transport (λ i → S ((pR i) x) ≡ (pR i) x) (f r)
   ≡ cong S (λ i → (pR (~ i) x)) ∙ (f r) ∙ (λ i → (pR i) x)
transportHomotopyFuncHell {X = X} {S = S} pR =
  J
  (λ R p → (f : {x : X} → S x ≡ x → S (R x) ≡ (R x))
            {x : X} (r : S x ≡ x)
         → transport (λ i → S ((p (~ i)) x) ≡ ((p (~ i)) x)) (f r)
         ≡ cong S (λ i → (p i x)) ∙ (f r) ∙ (λ i → (p (~ i)) x))
  (λ f r → transportRefl _ ∙ rUnit _ ∙ lUnit _)
  (pR ⁻¹)

transportHomotopyFuncHell' : {X Y : Type ℓ-zero}
  {SY : Y → Y}
  {SX : X → X}
  {R T : X → Y}
  (pR : R ≡ T)
  (f : {x : X} → SX x ≡ x → SY (R x) ≡ R x)
  {x : X}
  (r : SX x ≡ x)
  → transport (λ i → SY ((pR i) x) ≡ (pR i) x) (f r)
   ≡ cong SY (λ i → (pR (~ i) x)) ∙ (f r) ∙ (λ i → (pR i) x)
transportHomotopyFuncHell' {X = X} {Y = Y} {SY = SY} {SX = SX} {R = R} pR =
  J (λ T p → (f : {x : X} → SX x ≡ x → SY (R x) ≡ R x)
              {x : X} (r : SX x ≡ x)
           → transport (λ i → SY ((p i) x) ≡ (p i) x) (f r)
            ≡ cong SY (λ i → (p (~ i) x)) ∙ (f r) ∙ (λ i → (p i) x))
    (λ f r → transportRefl _ ∙ rUnit _ ∙ lUnit _) pR
     

ℕ-Family : Type (ℓ-suc ℓ-zero)
ℕ-Family = ℕ → Type ℓ-zero

fCone : ℕ-Family → Type ℓ-zero → Type ℓ-zero
fCone A X = (n : ℕ) → X → A n

fCone→map→fCone : (A : ℕ-Family) (X Y : Type ℓ-zero)
  → fCone A X → (Y → X) → fCone A Y
fCone→map→fCone A X Y c f = λ n → (c n) ∘ f

isProdCone : (A : ℕ-Family) (X : Type ℓ-zero)
  → fCone A X → Type (ℓ-suc ℓ-zero)
isProdCone A X c = (Y : Type ℓ-zero) → isEquiv (fCone→map→fCone A X Y c)

fCone→map : (A : ℕ-Family) (X Y : Type ℓ-zero) (c : fCone A X)
  → isProdCone A X c → (fCone A Y) → (Y → X)
fCone→map A X Y c L = fst (invEquiv (_ , L Y))

fCone-map-sec : (A : ℕ-Family) (X Y : Type ℓ-zero) (c : fCone A X)
  (PX : isProdCone A X c) (c' : fCone A Y)
  → (λ n → (c n) ∘ (fCone→map A X Y c PX c')) ≡ c'
fCone-map-sec A X Y c PX c' = secEq (_ , PX Y) c'

fCone-map-sec' : (A : ℕ-Family) (X Y : Type ℓ-zero) (c : fCone A X)
  (PX : isProdCone A X c) (c' : fCone A Y) (n : ℕ) (y : Y)
  → c n (fCone→map A X Y c PX c' y) ≡ c' n y
fCone-map-sec' A X Y c PX c' n =
  funExt⁻ (funExt⁻ (fCone-map-sec A X Y c PX c') n)

fCone-map-ret : (A : ℕ-Family) (X Y : Type ℓ-zero) (c : fCone A X)
  (PX : isProdCone A X c) (f : Y → X)
  → fCone→map A X Y c PX (λ n → (c n) ∘ f) ≡ f
fCone-map-ret A X Y c PX f = retEq (_ , PX Y) f

map→fCone-cong-equiv : (A : ℕ-Family) (X Y : Type ℓ-zero) (c : fCone A X)
  (PX : isProdCone A X c) (f g : Y → X) →
  ((λ (n : ℕ) → (c n) ∘ f) ≡ (λ n → (c n) ∘ g)) ≃ (f ≡ g)
map→fCone-cong-equiv A X Y c PX f g = invEquiv (congEquiv (_ , PX Y))

map-fCone-cong-equiv' : (A : ℕ-Family) (X Y : Type ℓ-zero) (c : fCone A X)
  (PX : isProdCone A X c) (f g : Y → X) →
  ((n : ℕ) (y : Y) → c n (f y) ≡ c n (g y))
  ≃ ((y : Y) → f y ≡ g y)
map-fCone-cong-equiv' A X Y c PX f g =
  (funExt₂Equiv ∙ₑ map→fCone-cong-equiv A X Y c PX f g) ∙ₑ invEquiv funExtEquiv

fCone-map-comp : (A : ℕ-Family) (X Y Z : Type ℓ-zero) (c : fCone A X)
  (PX : isProdCone A X c) (c' : fCone A Y) (f : Z → Y)
  → (λ (n : ℕ) → (c n) ∘ ((fCone→map A X Y c PX c') ∘ f))
   ≡ (λ n → (c' n) ∘ f)
fCone-map-comp A X Y Z c PX c' f =
  cong (λ (k : fCone A Y) → (λ (n : ℕ) → k n ∘ f))
       (fCone-map-sec A X Y c PX c')

fCone-map-comp* : (A : ℕ-Family) (X Y Z : Type ℓ-zero) (c : fCone A X)
  (PX : isProdCone A X c) (c' : fCone A Y) (f : Z → Y)
  → fCone→map A X Y c PX c' ∘ f ≡ fCone→map A X Z c PX (λ n → c' n ∘ f)
fCone-map-comp* A X Y Z c PX c' f =
  (fCone-map-ret A X Z c PX (fCone→map A X Y c PX c' ∘ f)) ⁻¹
  ∙ (cong (fCone→map A X Z c PX) (fCone-map-comp A X Y Z c PX c' f))
  

map-fCone-comp : (A : ℕ-Family) (X Y Z : Type ℓ-zero) (c : fCone A X)
  (PX : isProdCone A X c) (c' : fCone A Y) (f : Z → Y)
  → (fCone→map A X Y c PX c') ∘ f ≡ fCone→map A X Z c PX (λ n → (c' n) ∘ f)
map-fCone-comp A X Y Z c PX c' f =
  (fCone-map-ret A X Z c PX (fCone→map A X Y c PX c' ∘ f)) ⁻¹
  ∙ (cong (fCone→map A X Z c PX) (fCone-map-comp A X Y Z c PX c' f))

map-fCone-comp-nat : (A : ℕ-Family) (X Y Z : Type ℓ-zero) (c : fCone A X)
  (PX : isProdCone A X c) (c' c'' : fCone A Y) (f : Z → Y)
  (p : c' ≡ c'')
  → cong (fCone→map A X Z c PX)
          (cong (λ k → (λ (n : ℕ) → k n ∘ f)) p)
   ∙ map-fCone-comp A X Y Z c PX c'' f ⁻¹
   ≡ map-fCone-comp A X Y Z c PX c' f ⁻¹
   ∙ cong (_∘ f) (cong (fCone→map A X Y c PX) p)
map-fCone-comp-nat A X Y Z c PX c' c'' f =
  J (λ z p → cong (fCone→map A X Z c PX)
                   (cong (λ k → (λ (n : ℕ) → k n ∘ f)) p)
              ∙ map-fCone-comp A X Y Z c PX z f ⁻¹
            ≡ map-fCone-comp A X Y Z c PX c' f ⁻¹
              ∙ cong (_∘ f) (cong (fCone→map A X Y c PX) p))
     (lUnit _ ⁻¹ ∙ rUnit _)

map-fCone-comp' : (A : ℕ-Family) (B : ℕ-Family)
  (W X Y Z : Type ℓ-zero) (c : fCone A W)
  (PW : isProdCone A W c) (c' : fCone B X) (PX : isProdCone B X c')
  (c'' : fCone B Y) (f : Z → Y)
  (η : (n : ℕ) → B n → A n)
  → fCone→map A W X c PW (λ n → η n ∘ c' n)
     ∘ fCone→map B X Z c' PX (λ n → c'' n ∘ f)
  ≡ fCone→map A W Z c PW (λ n → η n ∘ c'' n ∘ f)
map-fCone-comp' A B W X Y Z c PW c' PX c'' f η =
  map-fCone-comp A W X Z c PW (λ n → η n ∘ c' n)
                 (fCone→map B X Z c' PX (λ n → c'' n ∘ f))
  ∙ cong (λ (k : fCone B Z) → fCone→map A W Z c PW (λ n → η n ∘ k n))
     (fCone-map-sec B X Z c' PX (λ n → c'' n ∘ f))

fCone-map-comp' : (A : ℕ-Family) (X Y Z : Type ℓ-zero) (c : fCone A X)
  (PX : isProdCone A X c) (c' : fCone A Y) (f : Z → Y)
  → (n : ℕ) (z : Z) → c n (fCone→map A X Y c PX c' (f z))
                      ≡ c' n (f z)
fCone-map-comp' A X Y Z c PX c' f n z =
  funExt⁻ (funExt⁻ (fCone-map-comp A X Y Z c PX c' f) n) z

map-fCone-comp* : (A : ℕ-Family) (X Y Z : Type ℓ-zero) (c : fCone A X)
  (f : Y → X) (g : Z → Y)
  → fCone→map→fCone A X Z c (f ∘ g)
     ≡ (λ n → fCone→map→fCone A X Y c f n ∘ g)
map-fCone-comp* A X Y Z c f g = refl

isDiagram : ℕ-Family → Type ℓ-zero
isDiagram A = (n : ℕ) → A (1 + n) → A n

is-dCone : {X : Type ℓ-zero} (A : ℕ-Family) → isDiagram A
  → fCone A X → Type ℓ-zero
is-dCone {X = X} A a c = (n : ℕ) (x : X) → a n (c (1 + n) x) ≡ c n x

is-dCone→map→is-dCone : (A : ℕ-Family) (a : isDiagram A) (X Y : Type ℓ-zero)
  (c : fCone A X) → is-dCone A a c → (f : (Y → X))
  → is-dCone A a (fCone→map→fCone A X Y c f)
is-dCone→map→is-dCone A a X Y c h f = λ n y → h n (f y)

dCone : (A : ℕ-Family) (a : isDiagram A)
  → Type ℓ-zero → Type ℓ-zero
dCone A a X = Σ[ c ∈ fCone A X ] is-dCone A a c

dCone→map→dCone : (A : ℕ-Family) (a : isDiagram A) (X Y : Type ℓ-zero)
  (c : dCone A a X) → (Y → X) → dCone A a Y
dCone→map→dCone A a X Y (c , h) f =
  (fCone→map→fCone A X Y c f) , is-dCone→map→is-dCone A a X Y c h f

isLimitCone : (A : ℕ-Family) (a : isDiagram A) (X : Type ℓ-zero)
  → dCone A a X → Type (ℓ-suc ℓ-zero)
isLimitCone A a X c = (Y : Type ℓ-zero) → isEquiv (dCone→map→dCone A a X Y c)

dCone→map : (A : ℕ-Family) (a : isDiagram A) (X Y : Type ℓ-zero)
  (c : dCone A a X) → isLimitCone A a X c → dCone A a Y → (Y → X)
dCone→map A a X Y c L = fst (invEquiv (_ , L Y))

sCone : (A : ℕ-Family) (a : isDiagram A) (X : Type ℓ-zero)
  → fCone A X → fCone A X
sCone A a X c = λ n → a n ∘ c (1 + n)

sMap : (A : ℕ-Family) (a : isDiagram A) (X : Type ℓ-zero) (c : fCone A X)
  → isProdCone A X c → X → X
sMap A a X c P = fCone→map A X X c P (sCone A a X c)

sMap-comp-path : (A : ℕ-Family) (a : isDiagram A) (X Y Z : Type ℓ-zero)
  (c : fCone A X) (PX : isProdCone A X c) (c' : fCone A Y) (c'' : fCone A Y)
  (p : sCone A a Y c' ≡ c'') (g : Z → Y)
  → cong (λ (k : fCone A Y) → fCone→map A X Z c PX (λ n → k n ∘ g)) p
     ≡ map-fCone-comp A X Y Z c PX (sCone A a Y c') g ⁻¹
       ∙ cong (λ (k : fCone A Y) → fCone→map A X Y c PX k ∘ g) p
       ∙ map-fCone-comp A X Y Z c PX c'' g
sMap-comp-path A a X Y Z c PX c' c'' p =
  J (λ k q → (g : Z → Y) →
     cong (λ (k : fCone A Y) → fCone→map A X Z c PX (λ n → k n ∘ g)) q
     ≡ map-fCone-comp A X Y Z c PX (sCone A a Y c') g ⁻¹
       ∙ cong (λ (k : fCone A Y) → fCone→map A X Y c PX k ∘ g) q
       ∙ map-fCone-comp A X Y Z c PX k g)
    (λ g → (cong (map-fCone-comp A X Y Z c PX (sCone A a Y c') g ⁻¹ ∙_)
                  (lUnit _ ⁻¹)
            ∙ lCancel _) ⁻¹) p

sMap-comp-path* : (A : ℕ-Family) (a : isDiagram A) (X Y Z : Type ℓ-zero)
  (c : fCone A X) (PX : isProdCone A X c) (c' : fCone A Y) (c'' : fCone A Y)
  (g : Z → Y) (h : Z → Y) (p : g ≡ h)
  → cong (λ (g : Z → Y) →
           fCone→map A X Z c PX (λ n → c' n ∘ g)) p
     ≡ map-fCone-comp A X Y Z c PX c' g ⁻¹
       ∙ cong (fCone→map A X Y c PX c' ∘_) p
       ∙ map-fCone-comp A X Y Z c PX c' h
sMap-comp-path* A a X Y Z c PX c' c'' g h p =
  J (λ h' p' → cong (λ (g : Z → Y) →
                      fCone→map A X Z c PX (λ n → c' n ∘ g)) p'
              ≡ map-fCone-comp A X Y Z c PX c' g ⁻¹
              ∙ cong (fCone→map A X Y c PX c' ∘_) p'
              ∙ map-fCone-comp A X Y Z c PX c' h')
    ((cong (map-fCone-comp A X Y Z c PX c' g ⁻¹ ∙_) (lUnit _ ⁻¹)
    ∙ lCancel _) ⁻¹) p

corr-to-sMap-comp-path* : (A : ℕ-Family) (a : isDiagram A)
  (X Y Z : Type ℓ-zero)
  (c : fCone A X) (PX : isProdCone A X c) (c' : fCone A Y) (c'' : fCone A Y)
  (g : Z → Y) (h : Z → Y) (p : g ≡ h)
  → map-fCone-comp A X Y Z c PX c' g 
   ∙ cong (λ (g : Z → Y) →
           fCone→map A X Z c PX (λ n → c' n ∘ g)) p
     ≡ cong (fCone→map A X Y c PX c' ∘_) p
       ∙ map-fCone-comp A X Y Z c PX c' h
corr-to-sMap-comp-path* A a X Y Z c PX c' c'' g h =
  J (λ f p → map-fCone-comp A X Y Z c PX c' g
              ∙ cong
                (λ (g : Z → Y) → fCone→map A X Z c PX (λ n → c' n ∘ g))
                p
            ≡ cong (fCone→map A X Y c PX c' ∘_) p
              ∙ map-fCone-comp A X Y Z c PX c' f)
     (rUnit _ ⁻¹ ∙ lUnit _)


is-dCone' : {X : Type ℓ-zero} (A : ℕ-Family) (a : isDiagram A)
  → fCone A X → Type ℓ-zero
is-dCone' {X = X} A a c = sCone A a X c ≡ c

dCone' : (A : ℕ-Family) (a : isDiagram A)
  → Type ℓ-zero → Type ℓ-zero
dCone' A a X = Σ[ c ∈ fCone A X ] is-dCone' A a c

is-dCone≅is-dCone' : (A : ℕ-Family) (a : isDiagram A) (X : Type ℓ-zero)
  (c : fCone A X) → Iso (is-dCone A a c) (is-dCone' A a c)
Iso.fun (is-dCone≅is-dCone' A a X c) h = funExt (λ n → funExt (h n))
Iso.inv (is-dCone≅is-dCone' A a X c) h = λ n x → cong (λ t → t n x) h
Iso.rightInv (is-dCone≅is-dCone' A a X c) h = refl
Iso.leftInv (is-dCone≅is-dCone' A a X c) h = refl

dCone≅dCone' : (A : ℕ-Family) (a : isDiagram A) (X : Type ℓ-zero)
  → Iso (dCone A a X) (dCone' A a X)
dCone≅dCone' A a X = Σ-cong-iso-snd (is-dCone≅is-dCone' A a X)

is-dCone≃is-dCone' : (A : ℕ-Family) (a : isDiagram A) (X : Type ℓ-zero)
  (c : fCone A X) → is-dCone A a c ≃ is-dCone' A a c
is-dCone≃is-dCone' A a X c = isoToEquiv (is-dCone≅is-dCone' A a X c)

dCone≃dCone' : (A : ℕ-Family) (a : isDiagram A) (X : Type ℓ-zero)
  → dCone A a X ≃ dCone' A a X
dCone≃dCone' A a X = Σ-cong-equiv-snd (is-dCone≃is-dCone' A a X)

is-dCone'→map→is-dCone' : (A : ℕ-Family) (a : isDiagram A) (X Y : Type ℓ-zero)
  (c : fCone A X) → is-dCone' A a c
  → (f : Y → X) → is-dCone' A a (fCone→map→fCone A X Y c f)
is-dCone'→map→is-dCone' A a X Y c h f =
  cong (λ (c' : fCone A X) → (λ n → c' n ∘ f)) h

dCone'→map→dCone' : (A : ℕ-Family) (a : isDiagram A) (X Y : Type ℓ-zero)
  → dCone' A a X → (Y → X) → dCone' A a Y
dCone'→map→dCone' A a X Y (c , h) f =
  fCone→map→fCone A X Y c f , is-dCone'→map→is-dCone' A a X Y c h f

module dConeIsoNatural (A : ℕ-Family) (a : isDiagram A)
                       (X : Type ℓ-zero) (Y : Type ℓ-zero)
                       (f : Y → X) where

  dConeIsoIsNatural : (d : dCone A a X)
    → dCone'→map→dCone' A a X Y (Iso.fun (dCone≅dCone' A a X) d) f
     ≡ Iso.fun (dCone≅dCone' A a Y) (dCone→map→dCone A a X Y d f)
  dConeIsoIsNatural d = refl
  
isLimitCone' : (A : ℕ-Family) (a : isDiagram A) (X : Type ℓ-zero)
  → dCone' A a X → Type (ℓ-suc ℓ-zero)
isLimitCone' A a X c =
  (Y : Type ℓ-zero) → isEquiv (dCone'→map→dCone' A a X Y c)

dCone'→map : (A : ℕ-Family) (a : isDiagram A) (X Y : Type ℓ-zero)
  (c : dCone' A a X) → isLimitCone' A a X c → dCone' A a Y → (Y → X)
dCone'→map A a X Y c L = fst (invEquiv (_ , L Y))

module new-dCones (A : ℕ-Family) (a : isDiagram A)
  (PA X : Type ℓ-zero) (cA : fCone A PA)
  (PA' : isProdCone A PA cA) where

  s : PA → PA
  s = sMap A a PA cA PA'

  map→fCone : (X → PA) → fCone A X
  map→fCone = fCone→map→fCone A PA X cA

  new-dCone1 : Type ℓ-zero
  new-dCone1 = Σ[ c ∈ (fCone A X) ]
                (fCone→map A PA X cA PA' (sCone A a X c)
                ≡ fCone→map A PA X cA PA' c)

  new-dCone1Equiv : Iso (dCone' A a X) new-dCone1
  Iso.fun new-dCone1Equiv (c , p) =
    c , equivFun (congEquiv (invEquiv (_ , PA' X))) p
  Iso.inv new-dCone1Equiv (c , p) =
    c , equivFun (invEquiv (congEquiv (invEquiv (_ , PA' X)))) p
  Iso.rightInv new-dCone1Equiv (c , p) =
    ΣPathP (refl , (secEq (congEquiv (invEquiv (_ , PA' X))) p))
  Iso.leftInv new-dCone1Equiv (c , p) =
    ΣPathP (refl , (retEq (congEquiv (invEquiv (_ , PA' X))) p))

  new-dCone→map→dCone1 : (Y : Type ℓ-zero) → new-dCone1 → (Y → X)
                          → Σ[ c ∈ (fCone A Y) ]
                              (fCone→map A PA Y cA PA' (sCone A a Y c))
                              ≡ fCone→map A PA Y cA PA' c
  new-dCone→map→dCone1 Y (c , p) g =
    (λ n → c n ∘ g) ,
    (map-fCone-comp A PA X Y cA PA' (sCone A a X c) g) ⁻¹
    ∙ cong (_∘ g) p
    ∙ map-fCone-comp A PA X Y cA PA' c g

  new-dCone2 : Type ℓ-zero
  new-dCone2 = Σ[ c ∈ (fCone A X) ]
                (fCone→map A PA X cA PA'
                  (λ n → a n ∘ cA (1 + n) ∘ fCone→map A PA X cA PA' c)
                ≡ fCone→map A PA X cA PA' c)

  new-dCone2Equiv : Iso new-dCone1 new-dCone2
  Iso.fun new-dCone2Equiv (c , p) =
    c , (cong (λ (c' : fCone A X)
               → fCone→map A PA X cA PA' (λ n → a n ∘ c' (1 + n)))
              (fCone-map-sec A PA X cA PA' c)
        ∙ p)
  Iso.inv new-dCone2Equiv (c , p) =
    c , ((cong (λ (c' : fCone A X)
                → fCone→map A PA X cA PA' (λ n → a n ∘ c' (1 + n)))
               (fCone-map-sec A PA X cA PA' c)) ⁻¹
         ∙ p)
  Iso.rightInv new-dCone2Equiv (c , p) =
    ΣPathP (refl , (assoc _ _ _ ∙ cong (_∙ p) (rCancel _) ∙ lUnit p ⁻¹))
  Iso.leftInv new-dCone2Equiv (c , p) =
    ΣPathP (refl , (assoc _ _ _ ∙ cong (_∙ p) (lCancel _) ∙ lUnit p ⁻¹))

  new-dCone→map→dCone2 : (Y : Type ℓ-zero) → new-dCone2 → (Y → X)
                        → Σ[ c ∈ (fCone A Y) ]
                            (fCone→map A PA Y cA PA'
                              (λ n → a n ∘ cA (1 + n)
                                          ∘ fCone→map A PA Y cA PA' c)
                            ≡ fCone→map A PA Y cA PA' c)
  new-dCone→map→dCone2 Y (c , p) g =
    (λ n → c n ∘ g) ,
    (map-fCone-comp A PA PA Y cA PA' (λ n → a n ∘ cA (1 + n))
                    (fCone→map A PA Y cA PA' (λ n → c n ∘ g))) ⁻¹
    ∙ cong (fCone→map A PA PA cA PA' (λ n → a n ∘ cA (1 + n)) ∘_)
           ((map-fCone-comp A PA X Y cA PA' c g) ⁻¹)
    ∙ cong (_∘ g) (map-fCone-comp A PA PA X cA PA' (λ n → a n ∘ cA (1 + n))
                                  (fCone→map A PA X cA PA' c))
    ∙ cong (_∘ g) p
    ∙ map-fCone-comp A PA X Y cA PA' c g


  new-dCone3 : Type ℓ-zero
  new-dCone3 = Σ[ c ∈ (fCone A X) ]
                (s ∘ fCone→map A PA X cA PA' c)
                ≡ fCone→map A PA X cA PA' c

  new-dCone3Equiv : Iso new-dCone2 new-dCone3
  Iso.fun new-dCone3Equiv (c , p) =
    c , (map-fCone-comp A PA PA X cA PA' (λ n → a n ∘ cA (1 + n))
                        (fCone→map A PA X cA PA' c)
        ∙ p)
  Iso.inv new-dCone3Equiv (c , p) =
    c , ((map-fCone-comp A PA PA X cA PA' (λ n → a n ∘ cA (1 + n))
                         (fCone→map A PA X cA PA' c)) ⁻¹
        ∙ p)
  Iso.rightInv new-dCone3Equiv (c , p) =
    ΣPathP (refl , (assoc _ _ _ ∙ cong (_∙ p) (lCancel _) ∙ lUnit p ⁻¹))
  Iso.leftInv new-dCone3Equiv (c , p) =
    ΣPathP (refl , assoc _ _ _ ∙ cong (_∙ p) (rCancel _) ∙ lUnit p ⁻¹)

  new-dCone→map→dCone3 : (Y : Type ℓ-zero) → new-dCone3 → (Y → X)
                          → Σ[ c ∈ (fCone A Y) ]
                              (s ∘ fCone→map A PA Y cA PA' c)
                              ≡ fCone→map A PA Y cA PA' c
  new-dCone→map→dCone3 Y (c , p) g =
    (λ n → c n ∘ g) ,
    cong (s ∘_) (map-fCone-comp A PA X Y cA PA' c g ⁻¹)
    ∙ cong (_∘ g) p
    ∙ map-fCone-comp A PA X Y cA PA' c g


  new-dCone4 : Type ℓ-zero
  new-dCone4 = Σ[ f ∈ (X → PA) ]
                (s ∘ fCone→map A PA X cA PA' (map→fCone f))
                ≡ fCone→map A PA X cA PA' (map→fCone f)

  new-dCone4Equiv : Iso new-dCone3 new-dCone4
  new-dCone4Equiv = invIso (Σ-cong-iso-fst (equivToIso (_ , PA' X)))

  new-dCone→map→dCone4 : (Y : Type ℓ-zero) → new-dCone4 → (Y → X)
                          → Σ[ f ∈ (Y → PA) ]
                              ((s ∘ fCone→map A PA Y cA PA'
                                    (fCone→map→fCone A PA Y cA f))
                              ≡ fCone→map A PA Y cA PA'
                                (fCone→map→fCone A PA Y cA f))
  new-dCone→map→dCone4 Y (f , p) g =
    (f ∘ g) ,
    cong (s ∘_) (map-fCone-comp A PA X Y cA PA' (map→fCone f) g ⁻¹)
    ∙ cong (_∘ g) p
    ∙ map-fCone-comp A PA X Y cA PA' (map→fCone f) g


  new-dCone5 : Type ℓ-zero
  new-dCone5 = Σ[ f ∈ (X → PA) ]
                (s ∘ f) ≡ f

  is-new-dCone5 : (X → PA) → Type ℓ-zero
  is-new-dCone5 f = (s ∘ f) ≡ f 

  new-dCone5Equiv : Iso new-dCone4 new-dCone5
  Iso.fun new-dCone5Equiv (f , p) =
    f , cong (s ∘_) (retEq (_ , PA' X) f ⁻¹) ∙ p ∙ retEq (_ , PA' X) f
  Iso.inv new-dCone5Equiv (f , p) =
    f , cong (s ∘_) (retEq (_ , PA' X) f) ∙ p ∙ retEq (_ , PA' X) f ⁻¹
  Iso.rightInv new-dCone5Equiv (f , p) =
    ΣPathP (refl , (assoc _ _ _
                 ∙ cong (_∙ retEq (_ , PA' X) f)
                        (assoc _ _ _
                        ∙ cong (_∙ p ∙ retEq (_ , PA' X) f ⁻¹)
                               (rCancel _)
                        ∙ lUnit _ ⁻¹)
                 ∙ assoc _ _ _ ⁻¹
                 ∙ cong (p ∙_) (rCancel _)
                 ∙ rUnit _ ⁻¹))
  Iso.leftInv new-dCone5Equiv (f , p) =
    ΣPathP (refl , (assoc _ _ _
                 ∙ cong (_∙ retEq (_ , PA' X) f ⁻¹)
                        (assoc _ _ _
                        ∙ cong (_∙ p ∙ retEq (_ , PA' X) f)
                               (lCancel _)
                        ∙ lUnit _ ⁻¹)
                 ∙ assoc _ _ _ ⁻¹
                 ∙ cong (p ∙_) (lCancel _)
                 ∙ rUnit _ ⁻¹))

  new-dCone→map→dCone5 : (Y : Type ℓ-zero) → new-dCone5 → (Y → X)
                          → Σ[ f ∈ (Y → PA) ] ((s ∘ f) ≡ f)
  new-dCone→map→dCone5 Y (f , p) g = (f ∘ g) , (cong (_∘ g) p)

  hail-maryEquiv : Iso (dCone' A a X) new-dCone5
  Iso.fun hail-maryEquiv (c , p) =
    (fCone→map A PA X cA PA' c) ,
    map-fCone-comp A PA PA X cA PA' (λ n → a n ∘ cA (1 + n))
                                    (fCone→map A PA X cA PA' c)
    ∙ cong (λ (k : fCone A X) → fCone→map A PA X cA PA'
                                           (λ n → a n ∘ k (1 + n)))
           (fCone-map-sec A PA X cA PA' c)
    ∙ cong (fCone→map A PA X cA PA') p
  Iso.inv hail-maryEquiv (f , p) =
    (map→fCone f) ,
    equivFun (invEquiv (congEquiv (invEquiv (_ , PA' X))))
             (cong (λ (k : fCone A X) → fCone→map A PA X cA PA'
                                                   (λ n → a n ∘ k (1 + n)))
                    (fCone-map-sec A PA X cA PA' (map→fCone f) ⁻¹)
             ∙ map-fCone-comp A PA PA X cA PA' (λ n → a n ∘ cA (1 + n))
                              (fCone→map A PA X cA PA' (map→fCone f)) ⁻¹
             ∙ cong (s ∘_) (fCone-map-ret A PA X cA PA' f)
             ∙ p
             ∙ fCone-map-ret A PA X cA PA' f ⁻¹)
  Iso.rightInv hail-maryEquiv (f , p) =
    ΣPathP ((fCone-map-ret A PA X cA PA' f) ,
            toPathP (transportHomotopyFuncHell {S = s ∘_}
            (funExt (fCone-map-ret A PA X cA PA'))
            (λ {g : X → PA} (q : s ∘ g ≡ g) →
            map-fCone-comp A PA PA X cA PA' (λ n → a n ∘ cA (1 + n))
                                    (fCone→map A PA X cA PA' (map→fCone g))
    ∙ cong (λ (k : fCone A X) → fCone→map A PA X cA PA'
                                           (λ n → a n ∘ k (1 + n)))
           (fCone-map-sec A PA X cA PA' (map→fCone g))
    ∙ cong (fCone→map A PA X cA PA')
           (equivFun (invEquiv (congEquiv (invEquiv (_ , PA' X))))
             (cong (λ (k : fCone A X) → fCone→map A PA X cA PA'
                                                   (λ n → a n ∘ k (1 + n)))
                    (fCone-map-sec A PA X cA PA' (map→fCone g) ⁻¹)
             ∙ map-fCone-comp A PA PA X cA PA' (λ n → a n ∘ cA (1 + n))
                              (fCone→map A PA X cA PA' (map→fCone g)) ⁻¹
             ∙ cong (s ∘_) (fCone-map-ret A PA X cA PA' g)
             ∙ q
             ∙ fCone-map-ret A PA X cA PA' g ⁻¹))) p
             ∙ cong (λ (q : fCone→map A PA X cA PA'
                            (λ n → a n ∘ (map→fCone f) (1 + n))
                            ≡ fCone→map A PA X cA PA' (map→fCone f)) →
               cong (s ∘_) (fCone-map-ret A PA X cA PA' f ⁻¹)
               ∙ (map-fCone-comp A PA PA X cA PA' (λ n → a n ∘ cA (1 + n))
                                (fCone→map A PA X cA PA' (map→fCone f))
               ∙ cong (λ (k : fCone A X) → fCone→map A PA X cA PA'
                                                       (λ n → a n ∘ k (1 + n)))
                      (fCone-map-sec A PA X cA PA' (map→fCone f))
               ∙ q)
               ∙ fCone-map-ret A PA X cA PA' f)
               (secEq (congEquiv ((invEquiv (_ , PA' X))))
                (cong (λ (k : fCone A X) → fCone→map A PA X cA PA'
                                                   (λ n → a n ∘ k (1 + n)))
                    (fCone-map-sec A PA X cA PA' (map→fCone f) ⁻¹)
             ∙ map-fCone-comp A PA PA X cA PA' (λ n → a n ∘ cA (1 + n))
                              (fCone→map A PA X cA PA' (map→fCone f)) ⁻¹
             ∙ cong (s ∘_) (fCone-map-ret A PA X cA PA' f)
             ∙ p
             ∙ fCone-map-ret A PA X cA PA' f ⁻¹))
             ∙ cong (λ q → cong (s ∘_) (fCone-map-ret A PA X cA PA' f ⁻¹)
                            ∙ (map-fCone-comp A PA PA X cA PA'
                                (λ n → a n ∘ cA (1 + n))
                                (fCone→map A PA X cA PA' (map→fCone f))
                            ∙ q) ∙ fCone-map-ret A PA X cA PA' f)
                    (assoc _ _ _
                    ∙ cong (_∙ map-fCone-comp A PA PA X cA PA'
                               (λ n → a n ∘ cA (1 + n))
                              (fCone→map A PA X cA PA' (map→fCone f)) ⁻¹
                              ∙ cong (s ∘_) (fCone-map-ret A PA X cA PA' f)
                              ∙ p
                              ∙ fCone-map-ret A PA X cA PA' f ⁻¹)
                            (rCancel _)
                    ∙ lUnit _ ⁻¹)
             ∙ cong (λ q → cong (s ∘_) (fCone-map-ret A PA X cA PA' f ⁻¹)
                             ∙ q ∙ fCone-map-ret A PA X cA PA' f)
                    (assoc _ _ _
                    ∙ cong (_∙ (cong (s ∘_) (fCone-map-ret A PA X cA PA' f)
                                ∙ p ∙ fCone-map-ret A PA X cA PA' f ⁻¹))
                            (rCancel _)
                    ∙ lUnit _ ⁻¹)
             ∙ assoc _ _ _
             ∙ cong (_∙ fCone-map-ret A PA X cA PA' f)
                     (assoc _ _ _
                     ∙ cong (_∙ p ∙ fCone-map-ret A PA X cA PA' f ⁻¹)
                       (lCancel _)
                     ∙ lUnit _ ⁻¹)
             ∙ assoc _ _ _ ⁻¹
             ∙ cong (p ∙_) (lCancel _)
             ∙ rUnit _ ⁻¹))
  Iso.leftInv hail-maryEquiv (c , p) =
    ΣPathP ((fCone-map-sec A PA X cA PA' c)
           , toPathP (transportHomotopyFuncHell {S = sCone A a X}
                      (funExt (fCone-map-sec A PA X cA PA'))
                      (λ {k : fCone A X} (q : sCone A a X k ≡ k)
                   → equivFun (invEquiv (congEquiv (invEquiv (_ , PA' X))))
             (cong (λ (k' : fCone A X) → fCone→map A PA X cA PA'
                                                   (λ n → a n ∘ k' (1 + n)))
                    (fCone-map-sec A PA X cA PA'
                       (map→fCone (fCone→map A PA X cA PA' k)) ⁻¹)
             ∙ map-fCone-comp A PA PA X cA PA' (λ n → a n ∘ cA (1 + n))
                              (fCone→map A PA X cA PA'
                                 (map→fCone (fCone→map A PA X cA PA' k))) ⁻¹
             ∙ cong (s ∘_) (fCone-map-ret A PA X cA PA'
                                          (fCone→map A PA X cA PA' k))
             ∙ (map-fCone-comp A PA PA X cA PA' (λ n → a n ∘ cA (1 + n))
                                    (fCone→map A PA X cA PA' k)
    ∙ cong (λ (k' : fCone A X) → fCone→map A PA X cA PA'
                                           (λ n → a n ∘ k' (1 + n)))
           (fCone-map-sec A PA X cA PA' k)
    ∙ cong (fCone→map A PA X cA PA') q)
             ∙ fCone-map-ret A PA X cA PA' (fCone→map A PA X cA PA' k) ⁻¹))
                      p
   ∙ cong (λ (q : fCone→map A PA X cA PA'
                  (λ n → a n ∘ (map→fCone (fCone→map A PA X cA PA'
                                (map→fCone (fCone→map A PA X cA PA' c)))
                                (1 + n)))
                  ≡ fCone→map A PA X cA PA'
                    (map→fCone (fCone→map A PA X cA PA' c)))
      → cong (sCone A a X) (fCone-map-sec A PA X cA PA' c ⁻¹)
           ∙ (equivFun (invEquiv (congEquiv (invEquiv (_ , PA' X))))
             (cong (λ (k' : fCone A X) → fCone→map A PA X cA PA'
                                                   (λ n → a n ∘ k' (1 + n)))
                    (fCone-map-sec A PA X cA PA'
                       (map→fCone (fCone→map A PA X cA PA' c)) ⁻¹)
             ∙ q))
     ∙ fCone-map-sec A PA X cA PA' c)
       (assoc _ _ _ ∙
        assoc _ _ _ ∙
        cong (_∙ fCone-map-ret A PA X cA PA' (fCone→map A PA X cA PA' c) ⁻¹)
        (assoc _ _ _
        ∙ cong (_∙ cong (λ (k' : fCone A X) → fCone→map A PA X cA PA'
                                           (λ n → a n ∘ k' (1 + n)))
           (fCone-map-sec A PA X cA PA' c)
    ∙ cong (fCone→map A PA X cA PA') p) (assoc _ _ _ ⁻¹
            ∙ (sMap-comp-path* A a PA PA X cA PA' (λ n → a n ∘ cA (1 + n))
              (sCone A a PA cA) _ (fCone→map A PA X cA PA' c)
              (fCone-map-ret A PA X cA PA'
              (fCone→map A PA X cA PA' c)) ⁻¹))))
     ∙ cong (λ q → cong (sCone A a X) (fCone-map-sec A PA X cA PA' c ⁻¹)
                     ∙ equivFun (invEquiv (congEquiv (invEquiv (_ , PA' X))))
                       q
                     ∙ fCone-map-sec A PA X cA PA' c)
              (assoc _ _ _
              ∙ cong (_∙ fCone-map-ret A PA X cA PA'
                         (fCone→map A PA X cA PA' c) ⁻¹)
                      (assoc _ _ _
                      ∙ assoc _ _ _
                      ∙ cong (_∙ cong (fCone→map A PA X cA PA') p)
                        (cong (_∙ cong (fCone→map A PA X cA PA')
                              (cong (sCone A a X)
                                    (fCone-map-sec A PA X cA PA' c)))
                              (cong (λ (q : map→fCone
                              (fCone→map A PA X cA PA'
                              (map→fCone (fCone→map A PA X cA PA' c)))
                              ≡ map→fCone (fCone→map A PA X cA PA' c))
                              → cong (fCone→map A PA X cA PA')
                              (cong (sCone A a X) q) ⁻¹
       ∙ cong (fCone→map A PA X cA PA') (cong (sCone A a X)
       (cong (map→fCone) (fCone-map-ret A PA X cA PA'
       (fCone→map A PA X cA PA' c)))))
       (commPathIsEq (PA' X) (fCone→map A PA X cA PA' c))
       ∙ lCancel _))
                      ∙ assoc _ _ _ ⁻¹ ∙ lUnit _ ⁻¹)
              ∙ cong ((cong (fCone→map A PA X cA PA') (cong (sCone A a X)
              (fCone-map-sec A PA X cA PA' c))
              ∙ cong (fCone→map A PA X cA PA') p) ∙_)
              (cong (_⁻¹)
              (isHAEquiv.com-op (snd (equiv→HAEquiv (_ , PA' X))) c ⁻¹))
         ∙ cong (_∙ cong (fCone→map A PA X cA PA')
                (fCone-map-sec A PA X cA PA' c) ⁻¹)
                ((cong-∙ (fCone→map A PA X cA PA')
                (cong (sCone A a X) (fCone-map-sec A PA X cA PA' c)) p) ⁻¹)
         ∙ (cong-∙ (fCone→map A PA X cA PA') (cong (sCone A a X)
         (fCone-map-sec A PA X cA PA' c) ∙ p)
         (fCone-map-sec A PA X cA PA' c ⁻¹)) ⁻¹)
     ∙ cong (cong (sCone A a X) (fCone-map-sec A PA X cA PA' c ⁻¹) ∙_)
            (cong (_∙ fCone-map-sec A PA X cA PA' c)
                  (retEq (congEquiv (invEquiv (_ , PA' X)))
                         _)
            ∙ assoc _ _ _ ⁻¹
            ∙ cong ((cong (sCone A a X) (fCone-map-sec A PA X cA PA' c) ∙ p)
                     ∙_)
                    (lCancel _)
            ∙ rUnit _ ⁻¹)
     ∙ assoc _ _ _
     ∙ cong (_∙ p) (lCancel _) ∙ lUnit _ ⁻¹))


module dConeEquivsNat  (A : ℕ-Family) (a : isDiagram A)
  (PA X Y : Type ℓ-zero) (cA : fCone A PA)
  (PA' : isProdCone A PA cA) (f : Y → X) where

  module new-dConesX = new-dCones A a PA X cA PA'

  module new-dConesY = new-dCones A a PA Y cA PA'

  new-map→dCone1Equiv : (c : dCone' A a X)
    → (Iso.fun (new-dConesY.new-dCone1Equiv) (dCone'→map→dCone' A a X Y c f))
     ≡ new-dConesX.new-dCone→map→dCone1 Y
         (Iso.fun (new-dConesX.new-dCone1Equiv) c) f
  new-map→dCone1Equiv (c , p) =
    ΣPathP (refl , sMap-comp-path A a PA X Y cA PA' c c p f)

  new-map→dCone5Equiv' : (c : dCone' A a X)
    → Iso.fun (new-dConesY.hail-maryEquiv)
               (dCone'→map→dCone' A a X Y c f)
     ≡ new-dConesX.new-dCone→map→dCone5 Y
        (Iso.fun (new-dConesX.hail-maryEquiv) c) f
  new-map→dCone5Equiv' (c , p) =
    ΣPathP ((map-fCone-comp A PA X Y cA PA' c f ⁻¹) ,
      toPathP (transportHomotopyFuncHell' {SY = new-dConesY.s ∘_}
      {SX = sCone A a X}
      (funExt λ c' → map-fCone-comp A PA X Y cA PA' c' f ⁻¹)
      (λ {c' : fCone A X} (q : sCone A a X c' ≡ c')
      → map-fCone-comp A PA PA Y cA PA' (λ n → a n ∘ cA (1 + n))
                                    (fCone→map A PA Y cA PA' λ n → c' n ∘ f)
    ∙ cong (λ (k : fCone A Y) → fCone→map A PA Y cA PA'
                                           (λ n → a n ∘ k (1 + n)))
           (fCone-map-sec A PA Y cA PA' λ n → c' n ∘ f)
    ∙ cong (fCone→map A PA Y cA PA')
    (cong (λ (k : fCone A X) → (λ n → k n ∘ f)) q)) p --now begins long mrch
    ∙ (cong (new-dConesY.s ∘_) (map-fCone-comp A PA X Y cA PA' c f) ⁻¹ ⁻¹
    ∙ (map-fCone-comp A PA PA Y cA PA' (sCone A a PA cA)
                                       (fCone→map A PA Y cA PA'
                                         (λ n → c n ∘ f))
       ∙ cong (fCone→map A PA Y cA PA') (cong (sCone A a Y)
                                            (fCone-map-sec A PA Y cA PA'
                                              (λ n → c n ∘ f)))
       ∙ cong (fCone→map A PA Y cA PA')
              (cong (λ (k : fCone A X) → (λ n → k n ∘ f)) p))
    ∙ map-fCone-comp A PA X Y cA PA' c f ⁻¹
    ≡⟨ cong (_∙ (map-fCone-comp A PA PA Y cA PA' (sCone A a PA cA)
                                 (fCone→map A PA Y cA PA' (λ n → c n ∘ f))
               ∙ cong (fCone→map A PA Y cA PA') (cong (sCone A a Y)
                                                 (fCone-map-sec A PA Y cA PA'
                                                  (λ n → c n ∘ f)))
               ∙ cong (fCone→map A PA Y cA PA')
                      (cong (λ (k : fCone A X) → (λ n → k n ∘ f)) p))
               ∙ map-fCone-comp A PA X Y cA PA' c f ⁻¹)
            (symInvo
             (cong (new-dConesY.s ∘_) (map-fCone-comp A PA X Y cA PA' c f)) ⁻¹)
       ∙ cong (cong (new-dConesY.s ∘_) (map-fCone-comp A PA X Y cA PA' c f) ∙_)
              (assoc _ _ _ ⁻¹
              ∙ cong (map-fCone-comp A PA PA Y cA PA' (sCone A a PA cA)
                         (fCone→map A PA Y cA PA' (λ n → c n ∘ f)) ∙_)
                     (assoc _ _ _ ⁻¹
                     ∙ cong (_∙ cong (fCone→map A PA Y cA PA')
                                  (cong
                                  (λ (k : fCone A X) → (λ n → k n ∘ f)) p)
                                  ∙ map-fCone-comp A PA X Y cA PA' c f ⁻¹)
                       (cong (cong (fCone→map A PA Y cA PA'))
                        (cong (cong (sCone A a Y))
                        ((comm1 (λ Z → fCone A Z)
                        (λ _ c' → (λ (n : ℕ) → cA n
                        ∘ fCone→map A PA _ cA PA' c'))
                        (λ _ → funExt (λ c' → fCone-map-sec A PA _ cA PA' c'))
                        (λ g → (λ k → (λ (n : ℕ) → k n ∘ g)))
                                f c) ⁻¹ ∙ assoc _ _ _ ∙
                        cong (_∙ cong (λ (k : fCone A X)
                                         → (λ (n : ℕ) → k n ∘ f))
                                         (fCone-map-sec A PA X cA PA' c))
                              (cong (cong (λ g → (λ (n : ℕ) → cA n ∘ g))
                              (cong (fCone→map A PA Y cA PA')
                              (cong (λ k → (λ (n : ℕ) → k n ∘ f))
                              (fCone-map-sec A PA X cA PA' c))) ⁻¹ ∙_)
                              (isHAEquiv.com (snd
                              (equiv→HAEquiv (_ , PA' Y)))
                              (fCone→map A PA X cA PA' c ∘ f) ⁻¹)
                              ∙ (cong-∙ (λ g → (λ (n : ℕ) → cA n ∘ g))
                              (cong (fCone→map A PA Y cA PA')
                              (cong (λ k → (λ (n : ℕ) → k n ∘ f))
                              (fCone-map-sec A PA X cA PA' c)) ⁻¹)
                              (fCone-map-ret A PA Y cA PA'
                              (fCone→map A PA X cA PA' c ∘ f))) ⁻¹
                              ∙ cong (cong (λ g → (λ (n : ℕ) → cA n ∘ g)))
                              (cong (cong (fCone→map A PA Y cA PA')
                              (cong (λ k → (λ (n : ℕ) → k n ∘ f))
                              (fCone-map-sec A PA X cA PA' c)) ⁻¹ ∙_)
                              (symInvo _)
                              ∙ (symDistr (fCone-map-ret A PA Y cA PA'
                              (fCone→map A PA X cA PA' c ∘ f) ⁻¹)
                              (cong (fCone→map A PA Y cA PA')
                              (cong (λ k → (λ (n : ℕ) → k n ∘ f))
                              (fCone-map-sec A PA X cA PA' c)))) ⁻¹)))))
                     ∙ cong (_∙ (cong (fCone→map A PA Y cA PA')
                     (cong (λ k → (λ (n : ℕ) → k n ∘ f)) p))
                     ∙ map-fCone-comp A PA X Y cA PA' c f ⁻¹)
                     (cong (cong (fCone→map A PA Y cA PA'))
                     (cong-∙ (sCone A a Y)
                     (cong (λ g → (λ (n : ℕ) → cA n ∘ g))
                     (map-fCone-comp A PA X Y cA PA' c f) ⁻¹)
                     (cong (λ k → (λ (n : ℕ) → k n ∘ f))
                     (fCone-map-sec A PA X cA PA' c)))
                     ∙ cong-∙ (fCone→map A PA Y cA PA')
                     (cong (λ g → (λ (n : ℕ) → sCone A a PA cA n ∘ g))
                     (map-fCone-comp A PA X Y cA PA' c f) ⁻¹)
                     (cong (λ k → (λ (n : ℕ) → k n ∘ f)) (cong (sCone A a X)
                     (fCone-map-sec A PA X cA PA' c)))) ∙ assoc _ _ _ ⁻¹)) ⟩
    cong (new-dConesY.s ∘_) (map-fCone-comp A PA X Y cA PA' c f)
    ∙ map-fCone-comp A PA PA Y cA PA' (sCone A a PA cA)
                                      (fCone→map A PA Y cA PA'
                                        (λ n → c n ∘ f))
    ∙ cong (fCone→map A PA Y cA PA') (cong (λ (g : Y → PA)
                                       → (λ (n : ℕ) → sCone A a PA cA n ∘ g))
                                       (map-fCone-comp A PA X Y cA PA' c f) ⁻¹)
    ∙ cong (fCone→map A PA Y cA PA') ((cong (λ (k : fCone A X)
                                         → (λ (n : ℕ) → k n ∘ f))
                                         (cong (sCone A a X)
                                         (fCone-map-sec A PA X cA PA' c))))
    ∙ cong (fCone→map A PA Y cA PA')
              (cong (λ (k : fCone A X) → (λ n → k n ∘ f)) p)
    ∙ map-fCone-comp A PA X Y cA PA' c f ⁻¹
    ≡⟨ assoc (cong (new-dConesY.s ∘_) (map-fCone-comp A PA X Y cA PA' c f))
             (map-fCone-comp A PA PA Y cA PA' (sCone A a PA cA)
              (fCone→map A PA Y cA PA' (λ n → c n ∘ f))) _
       ∙ assoc _ _ _
       ∙ cong (_∙ cong (fCone→map A PA Y cA PA') ((cong (λ (k : fCone A X)
                                         → (λ (n : ℕ) → k n ∘ f))
                                         (cong (sCone A a X)
                                         (fCone-map-sec A PA X cA PA' c))))
    ∙ cong (fCone→map A PA Y cA PA')
              (cong (λ (k : fCone A X) → (λ n → k n ∘ f)) p)
    ∙ map-fCone-comp A PA X Y cA PA' c f ⁻¹) (assoc _ _ _ ⁻¹)
    ∙ cong ((cong (new-dConesY.s ∘_) (map-fCone-comp A PA X Y cA PA' c f)
    ∙ map-fCone-comp A PA PA Y cA PA' (sCone A a PA cA)
                                      (fCone→map A PA Y cA PA'
                                        (λ n → c n ∘ f))
    ∙ cong (fCone→map A PA Y cA PA') (cong (λ (g : Y → PA)
                                       → (λ (n : ℕ) → sCone A a PA cA n ∘ g))
                                       (map-fCone-comp A PA X Y cA PA' c f) ⁻¹))
                                       ∙_)
      (assoc _ _ _
      ∙ cong (_∙ map-fCone-comp A PA X Y cA PA' c f ⁻¹)
        ((cong-∙ (fCone→map A PA Y cA PA')
                 (cong (λ (k : fCone A X) → (λ (n : ℕ) → k n ∘ f))
                       (cong (sCone A a X)
                              (fCone-map-sec A PA X cA PA' c)))
                 (cong (λ (k : fCone A X) → (λ n → k n ∘ f)) p)) ⁻¹)
      ∙ cong (λ q → cong (fCone→map A PA Y cA PA') q
                   ∙ map-fCone-comp A PA X Y cA PA' c f ⁻¹)
             ((cong-∙ (λ k → (λ (n : ℕ) → k n ∘ f))
                      (cong (sCone A a X) (fCone-map-sec A PA X cA PA' c))
                      p) ⁻¹)
      ∙ (map-fCone-comp-nat A PA X Y cA PA'
         (λ (n : ℕ) → sCone A a PA cA n ∘ (fCone→map A PA X cA PA' c))
         c f (cong (sCone A a X ) (fCone-map-sec A PA X cA PA' c) ∙ p))
      ∙ cong (map-fCone-comp A PA X Y cA PA'
               (λ n → sCone A a PA cA n ∘ fCone→map A PA X cA PA' c) f ⁻¹ ∙_)
        (cong (cong (_∘ f)) (cong-∙ (fCone→map A PA X cA PA')
        (cong (sCone A a X) (fCone-map-sec A PA X cA PA' c)) (p))
        ∙ cong-∙ (_∘ f) (cong (fCone→map A PA X cA PA')
                               (cong (sCone A a X)
                                     (fCone-map-sec A PA X cA PA' c)))
                        (cong (fCone→map A PA X cA PA') p))) ⟩
    (cong (new-dConesY.s ∘_) (map-fCone-comp A PA X Y cA PA' c f)
    ∙ map-fCone-comp A PA PA Y cA PA' (sCone A a PA cA)
                                      (fCone→map A PA Y cA PA'
                                        (λ n → c n ∘ f))
    ∙ cong (fCone→map A PA Y cA PA') (cong (λ (g : Y → PA)
                                       → (λ (n : ℕ) → sCone A a PA cA n ∘ g))
                                       (map-fCone-comp A PA X Y cA PA' c f) ⁻¹))
    ∙ map-fCone-comp A PA X Y cA PA'
        (λ n → sCone A a PA cA n ∘ fCone→map A PA X cA PA' c) f ⁻¹
    ∙ cong (_∘ f) (cong (fCone→map A PA X cA PA')
                        (cong (sCone A a X) (fCone-map-sec A PA X cA PA' c)))
    ∙ cong (_∘ f) (cong (fCone→map A PA X cA PA') p)
    ≡⟨ cong (_∙ map-fCone-comp A PA X Y cA PA'
                (λ n → sCone A a PA cA n ∘ fCone→map A PA X cA PA' c) f ⁻¹
              ∙ cong (_∘ f)
                     (cong (fCone→map A PA X cA PA')
                           (cong (sCone A a X)
                                 (fCone-map-sec A PA X cA PA' c)))
             ∙ cong (_∘ f) (cong (fCone→map A PA X cA PA') p))
            (assoc _ _ _
            ∙ cong (_∙ cong (fCone→map A PA Y cA PA') (cong (λ (g : Y → PA)
                                       → (λ (n : ℕ) → sCone A a PA cA n ∘ g))
                                       (map-fCone-comp A PA X Y cA PA' c f) ⁻¹))
                   ((corr-to-sMap-comp-path* A a PA PA Y cA PA'
                     (sCone A a PA cA) cA
                     (fCone→map A PA X cA PA' c ∘ f)
                     (fCone→map A PA Y cA PA' (λ n → c n ∘ f))
                     (map-fCone-comp A PA X Y cA PA' c f)) ⁻¹)
            ∙ assoc _ _ _ ⁻¹
            ∙ cong (map-fCone-comp A PA PA Y cA PA' (sCone A a PA cA)
                                    (fCone→map A PA X cA PA' c ∘ f) ∙_)
                    (rCancel _)
            ∙ rUnit _ ⁻¹) ⟩ -- use sMap-comp-path*
    map-fCone-comp A PA PA Y cA PA' (sCone A a PA cA)
                                    (fCone→map A PA X cA PA' c ∘ f)
    ∙ map-fCone-comp A PA X Y cA PA'
        (λ n → sCone A a PA cA n ∘ fCone→map A PA X cA PA' c) f ⁻¹
    ∙ cong (_∘ f) (cong (fCone→map A PA X cA PA')
                        (cong (sCone A a X) (fCone-map-sec A PA X cA PA' c)))
    ∙ cong (_∘ f) (cong (fCone→map A PA X cA PA') p)
    ≡⟨ assoc _ _ _ ∙ cong (_∙ cong (_∘ f) (cong (fCone→map A PA X cA PA')
    (cong (sCone A a X) (fCone-map-sec A PA X cA PA' c))) ∙ cong (_∘ f)
    (cong (fCone→map A PA X cA PA') p)) (assoc _ _ _ ⁻¹ ∙ cong
    (fCone-map-ret A PA Y cA PA'
    (new-dConesY.s ∘ fCone→map A PA X cA PA' c ∘ f) ⁻¹ ∙_)
    (map-fCone-comp-nat A PA X Y cA PA'
    (λ n → cA n ∘ (new-dConesY.s ∘ fCone→map A PA X cA PA' c))
    (λ n → sCone A a PA cA n ∘ fCone→map A PA X cA PA' c) f
    (cong (λ k → (λ (n : ℕ) → k n ∘ fCone→map A PA X cA PA' c))
    (fCone-map-sec A PA PA cA PA' (sCone A a PA cA))))
    ∙ assoc _ _ _ ∙ cong (_∙ cong (_∘ f) (cong (fCone→map A PA X cA PA')
    (cong (λ k → (λ (n : ℕ) → k n ∘ fCone→map A PA X cA PA' c))
    (fCone-map-sec A PA PA cA PA' (sCone A a PA cA)))))
    (cong (fCone-map-ret A PA Y cA PA'
    (new-dConesY.s ∘ fCone→map A PA X cA PA' c ∘ f) ⁻¹ ∙_)
    (symDistr _ _ ∙ cong (cong (fCone→map A PA Y cA PA')
    (cong (λ k → (λ (n : ℕ) → k n ∘ f))
    (fCone-map-sec A PA X cA PA'
    (λ n → cA n ∘ new-dConesY.s ∘ fCone→map A PA X cA PA' c))) ⁻¹ ∙_)
    (symInvo (fCone-map-ret A PA Y cA PA'
    (fCone→map A PA X cA PA'
    (λ n → cA n ∘ (new-dConesY.s ∘ fCone→map A PA X cA PA' c)) ∘ f)) ⁻¹)
    ∙ cong (λ q → q ⁻¹ ∙ fCone-map-ret A PA Y cA PA'
    (fCone→map A PA X cA PA'
    (λ n → cA n ∘ (new-dConesY.s ∘ fCone→map A PA X cA PA' c)) ∘ f))
    (cong (cong (fCone→map A PA Y cA PA'))
    (cong (cong (λ (k : fCone A X) → (λ (n : ℕ) → k n ∘ f)))
    (isHAEquiv.com (snd
        (equiv→HAEquiv (_ , PA' X)))
                              (new-dConesY.s
                               ∘ fCone→map A PA X cA PA' c) ⁻¹))))
        ∙ comm2 (λ Z → (Z → PA))
        (λ _ g → fCone→map A PA _ cA PA' (λ (n : ℕ) → cA n ∘ g))
        (λ _ → funExt (λ g → fCone-map-ret A PA _ cA PA' g))
        (λ h g → g ∘ h) f
        (new-dConesY.s ∘ fCone→map A PA X cA PA' c)))
        ∙ cong (_∙ (cong (_∘ f) (cong (fCone→map A PA X cA PA')
        (cong (sCone A a X) (fCone-map-sec A PA X cA PA' c)))
        ∙ cong (_∘ f) (cong (fCone→map A PA X cA PA') p)))
        ((cong-∙ (_∘ f) (fCone-map-ret A PA X cA PA'
        (new-dConesY.s ∘ fCone→map A PA X cA PA' c) ⁻¹)
        (cong (fCone→map A PA X cA PA')
        (cong (λ k → (λ (n : ℕ) → k n ∘ fCone→map A PA X cA PA' c))
        (fCone-map-sec A PA PA cA PA' (sCone A a PA cA))))) ⁻¹) ⟩
    cong (_∘ f) (map-fCone-comp A PA PA X cA PA' (sCone A a PA cA)
                                        (fCone→map A PA X cA PA' c)
    ∙ cong (fCone→map A PA X cA PA')
           (cong (sCone A a X)
           (fCone-map-sec A PA X cA PA' c))
    ∙ cong (fCone→map A PA X cA PA') p) ∎)))
  
